/*
 * Copyright (C) 2012  Politecnico di Milano
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef BBQUE_PROFILE_MANAGER_H_
#define BBQUE_PROFILE_MANAGER_H_

#include "bbque/config.h"
#include "bbque/application_manager.h"
#include "bbque/scheduler_manager.h"
#include "bbque/utils/logging/logger.h"
#include "bbque/utils/metrics_collector.h"

using bbque::utils::MetricsCollector;

namespace bu = bbque::utils;

namespace bbque {

/**
 * @brief A class providing profiling support for the BarbequeRTRM
 * @ingroup sec07_pm
 *
 */
class ProfileManager {

public:

	/**
	 * @brief Exit codes returned by methods of this class
	 */
	typedef enum ExitCode {
		OK = 0
	} ExitCode_t;

	/**
	 * @brief Get a reference to the profile manager
	 * The ProfileManager is a singleton class
	 * @return  a reference to the ProfileManager singleton instance
	 */
	static ProfileManager & GetInstance();

	/**
	 * @brief  Clean-up profile statistics
	 */
	~ProfileManager();


	/**
	 * @brief Porfile the last computed resource schedule
	 */
	ExitCode_t ProfileSchedule();

private:

	/**
	 * @brief The logger used by the resource manager.
	 */
	std::unique_ptr<bu::Logger> logger;

	/**
	 * @brief The Resource Scheduler module
	 */
	SchedulerManager & sm;

	/**
	 * @brief The Application Proxy module
	 */
	ApplicationManager & am;

	/**
	 * @brief The collection of Barbeque metrics
	 */
	MetricsCollector & mc;

	/**
	 * @brief The collection of metrics generated by this module
	 */
	typedef enum ResMgrMetrics {

		//----- Sample statistics
		PM_SCHED_APP_VALUE,
		PM_SCHED_AWM_VALUE,
		PM_SCHED_FAIRNESS,
		PM_SCHED_WORKLOAD_MIX,

		PM_METRICS_COUNT
	} ResMgrMetrics_t;

	/** The metrics collected by this module */
	static MetricsCollector::MetricsCollection_t metrics[PM_METRICS_COUNT];

	/**
	 * @brief   Build a new instance of the resource manager
	 */
	ProfileManager();

	/**
	 * @brief Collect profiling stats on the specified scheduling class
	 */
	ExitCode_t ProfileScheduleClass(uint16_t prio);


};

} // namespace bbque

#endif // BBQUE_PROFILE_MANAGER_H_
