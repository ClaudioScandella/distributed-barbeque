/*
 * Copyright (C) 2012  Politecnico di Milano
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**

\page bbque_sec00_app Running Demo Applications

Once the BarbequeRTRM daemon has been started, accoding to the instructions
reported in \ref bbque_sec00_run, a novice user could get some confidence with
this framework by runnig the demo application.

Moreover, if you are interested into integrating a new application with this
run-time manager, than a set of "interactive" tutorials are provided to
demostrate with a step-by-step approach how to accomplish this task.


\section bbque_sec00_app_dem Demo Application

A really simple demo application is provided as a "contributed module" of BOSP.
Before using this application you should check to have it compiled, this
requires to enable the corresponding BOSP configuration option:
\code
Applications->bbque-testapp
\endcode

Check the BOSP configuration, under the @c Applications menu, the @c
bbque-testapp option should be selected, as shown in this figure:
\image html bosp_app_demo_conf.png

If this is not you case: simply enable this option, save the configuration,
exit the configuration menu and rebuild the image using the @c make command.

If you are in a BOSP Shell, the demo application @c bbque-testapp is already in
your path, otherwise you can find it deployed under @c ~/BOSP/out/usr/bin/bbque-testapp.
Starting the application with the @c -h flag allows you to check for the
different supported options:
\code
[BOSPShell BOSP] \> bbque-testapp -h
Usage: bbque-testapp [options]
TestApp Configuration Options:
  -h [ --help ]                         print this help message
  -v [ --version ]                      print program version
  -r [ --recipe ] arg (=BbqRTLibTestApp)
                                        recipe name (for all EXCs)
  -e [ --exc ] arg (=1)                 number of EXC to spawm
  -w [ --workload ] arg (=1)            overall BCE time [s]
  -c [ --cycles ] arg (=5)              workload cycles count
\endcode

This is a really dummy example of "stream-processing" application where you can
configure mainly:
<ul><li>
The number of <b>computation cycles</b>, which are 5 by default and can be
configure by the @c -c command line switch;
</li><li>
The total <b>workload amount</b> in seconds, which is 1[s] by default and can
be configure by the @c -w command line switch; this is the time the application
will run on the best case (i.e. maximum resources availability) and in this
time the application will run all the required computation cycles;
</li></ul>

The other options are not interesting right now, they will be much more clear
when you will have more feeling with the framework.

Starting with the default parameters, the application will run for (at least)
1[s] to complete a total amount of 5 processing cycles.
A number of interesting thinks happen underneath, which essentially
involves these main steps:
-# initializing the run-time management library (RTLib);
-# register the application to the BarbequeRTRM, by specifying a "recipe";
-# waiting for resources being assegned by the run-time manager;
-# configureing the application to run based on the assigned resources;
-# run all the processing cycles;
-# release all resources and unregister the application.

This is a screenshot of a successfully execution of the test application:
\image html bosp_app_demo_run.png

A few thinks it is worth to notice here, since they are common to all
applications integrated with the BarbequeRTRM. First of all, the log messages
produced by the RTLib code have all the same structure, let consider for
example this line:
\code
[06156 -    0.001630] MAIN       [INF]: STEP 1. Registering [001] EXCs, using recipe [BbqRTLibTestApp]...
\endcode

the content of such messages is:
<ul><li>
<b>application ID</b> (@c 06156), used to uniquely identify the application withi the
BarbequeRTRM;
</li><li>
<b>execution time [s].[us]</b> (@c 0.001630), the time since the application has
started;
</li><li>
<b>code module</b> (@c MAIN), which is a token representing the module responsible for
this message; @c RTLIB is used by all the messages generated by the run-time
library while all other tags are application defined;
</li><li>
<b>log level</b> (@c [INF]), the verbosity level of the message;
</li><li>
<b>log message</b>, the actual log messages is everything following the first ":"
</li></ul>

At the end of the execution, the run-time library dumps on console a set
of profiling information which resume the execution behaviors of the
application, this is an example from the previous screenshot:
\code
#                _----------------=> Uses#
#               /    _------------=> Cycles#
#              |    /        _----=> Processing [ms]
#              |   |        /     |====== Sync Time [ms] ======|
#   EXC  AWM   |   |       |       _(min,max)_      _(avg,var)_
#     \   /    |   |       |     /             \  /             \
  exc_00-2     1      5    2396 (  0.027,599.214)(479.361,57440.130)
\endcode

Lines starting with "#" are just a comment header, which provide the name for
each colum. Than follow one line for each Application Working Mode (AWM) used
by the application during its execution.
In this example the application as always run on working mode (@c AWM) number
2, where all the 5 computing cycles (@c Cycles#) required has been executed.
The @c "Sync Time" represents the measure of the [ms] time interval in which
the application is on a "synchronization point", i.e. it can be eventually
re-configured to continue to work on a different AWM.

\section bbque_sec00_app_tut Tutorial Applications

If the demo application presented in the previous section is working properly,
than your installation of the BarbequeRTRM is also fine. Thus, if you are
interested, you could start to study how applications could be integrated
with the run-time manager.

A couple of tutorials are provided with the current BOSP installation, just
check to have them enabled into the BOSP configuration menu. Considering the
previous screenshot, check that the two options under @c "RTLib Tutorials" have
been selected:
\code
Applications->Plain API Tutorial
Applications->AEM API Tutorial
\endcode

If you are in a BOSP Shell, the two tutorial applications:
<b>bbque-tutorial-plain</b> and <b>bbque-tutorial-aem</b> is already in your
path, otherwise you can find it deployed under @c ~/BOSP/out/usr/bin.
A top down approach could easy the understanding of the concepts, thus
generally it makes sense to start with the tutorial on the <i>Abstract Execution
Model (AEM)</i>. This is not only the more high-level API but also it is much
likely the only API you will use for applications integration. Indeed, the
tutorial on the Plain API is useful just if you are interested on a better
understanding of some low-level concepts of the integration between the
BarbequeRTRM and your application.

Each tutorials are quite interactive applications which not only present some
concepts and methods of the integration process but also show you a live
execution of the discussed methods. This is a screenshot of the AEM tutorial running:
\image html bosp_app_tut2_run.png

As you can see, the tutorial provide a description of a concept, a code snippet
which shows how to use the specific concept or method and finally execute that
method to show you the result of such execution, i.e. the log messages produced
by the RTLib.

More details on the run-time library features and the integration process of
new applications with the BarbequeRTRM could be found startinf from \ref
rtlib_sec01_ow.

*/
