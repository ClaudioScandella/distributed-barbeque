#!/bin/sh

### BEGIN INIT INFO
# Provides:          bbqued
# Required-Start:
# Required-Stop:
# Should-Start:
# Should-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: BarbequeRTRM daemon for Run-Time Resource Management
# Description:       The Barbeque daemon wait for applications needing to
#                    access accellerator resources and assigne them according
#                    to resources availability and application requirements.
### END INIT INFO

# Barbeque daemon handler script. Distro-independent script to start/stop
# daemon. Should be runnable in any distro but won't give any feedback.
# Avoid bashism since this script runs using /bin/sh, not /bin/bash!

DAEMON_CONF="@CONFIG_BOSP_RUNTIME_PATH@/@BBQUE_PATH_DEFAULTS@/bbqued"
if [ ! -f $DAEMON_CONF ]; then
		echo "Daemon configuration [$DAEMON_CONF] not found"
		exit 1
fi

# Source the daemon configuration settings
. @CONFIG_BOSP_RUNTIME_PATH@/etc/default/bbqued

# Setup actual value (env overriding allowed)

# Daemon Configuration
BBQUE_BIN="${BBQUE_BIN:-$BIN}"
BBQUE_CONF="${BBQUE_CONF:-$CONF}"
BBQUE_BRTF="${BBQUE_BRTF:-$BRTF}"
BBQUE_PIDFILE="${BBQUE_PIDFILE:-$PIDFILE}"
BBQUE_LOGFILE="${BBQUE_LOGFILE:-$LOGFILE}"
BBQUE_LOCKFILE="${BBQUE_LOCKFILE:-$LOCKFILE}"

# PIL Layouts and Tools
BBQUE_PILSETUPS="${BBQUE_PILSETUPS:-$PILSETUPS}"
BBQUE_PILLAYOUT="${BBQUE_PILLAYOUT:-$PILLAYOUT}"
BBQUE_PILPARSER="${BBQUE_PILPARSER:-$PILPARSER}"

# CGroups Configurations and Tools
BBQUE_CGMOUNT="${BBQUE_CGMOUNT:-$CGMOUNT}"
BBQUE_CGCONFS="${BBQUE_CGCONFS:-$CGCONFS}"
BBQUE_CGPARSER="${BBQUE_CGPARSER:-$CGPARSER}"
BBQUE_CGAGENT="${BBQUE_CGAGENT:-$CGAGENT}"

# Check root permission
check_root() {
		# Make sure only root can run our script
		if [ "x`id -u`" != "x0" ]; then
				echo "This script must be run as root\n\n"
				exit 1
		fi
}

# Check mouting status of required controllers
check_controllers() {

		# The [cpuset,memory,cpu,cpuacct] controller must be mounted on the same hierarchy
		DIFFH=`awk '/^cpuset/{PH=$2}
						/^memory/{MH=$2}
						/^cpu/{CH=$2}
						/^cpuacct/{AH=$2}
						END{
							if(PH!=MH || PH!=CH || PH!=AH) print 1;
							else print 0;
						}' /proc/cgroups`

		# Hierarchies unmounting
		if [ $DIFFH -ne 0 ]; then
				echo '[cpuset,memory,cpu,cpuacct] controllers on different hierachies.'
				echo 'To continue, they have to be placed on the same hierarchy.'

				read -p 'Proceed with the unmounting (Y/n)? ' ANS
				if [ -z "$ANS" ]; then
					ANS='y'
				fi

				if [ $ANS != 'Y' ] && [ $ANS != 'y' ]; then
					echo
					echo 'BarbequeRTRM could not be started without proper CGroups setup'
					exit 1
				fi

				grep cgroup /proc/mounts | cut -d' ' -f2 | \
				while read C; do
					[ -d $C ] || continue
					case "$C" in
					*cpuset$*|*memory$*|*cpu$*|*cpuacct$*)
						echo "Unmounting [$C] controller..."
						sudo umount $C
					esac;
				done
		fi


		# Mount BBQ required hierarchies
		mount -t cgroup -o cpuset,memory,cpu,cpuacct bbque_cgroups \
				$BBQUE_CGMOUNT >/dev/null 2>&1
		if [ $? -ne 0 ]; then
				echo 'Mounting hierarchies [cpuset,memory,cpu,cpuacct] FAILED'
				echo 'BarbequeRTRM could not be started without proper CGroups setup'
				exit 2
		fi

}

# Build up the Shield my moving all tasks into HOST node
ShieldBuild() {
	echo "Moving all (user-space) tasks into HOST node..."
	local rotate='|/-\'

	printf "Moving tasks to HOST ";
	for D in `find /proc/ -maxdepth 1 -type d`; do
			P=`basename $D`
			# jumping kernel thread which should not be moved
			readlink $D/exe >/dev/null 2>&1 || continue

			rotate="${rotate#?}${rotate%???}"
			printf "[%5d]... %.1s\b\b\b\b\b\b\b\b\b\b\b\b" $P  $rotate;
			echo $P > $BBQUE_CGMOUNT/bbque/host/cgroup.procs
	done
	echo
}

# Release the HOST shiled by moving back tasks to ROOT node
release() {
	echo "Moving all (user-space) tasks back to ROOT node..."
	local rotate='|/-\'

	printf "Moving tasks to ROOT ";
	for P in `cat $BBQUE_CGMOUNT/bbque/host/tasks`; do

			rotate="${rotate#?}${rotate%???}"
			printf "[%5d]... %.1s\b\b\b\b\b\b\b\b\b\b\b\b" $P  $rotate;
			echo $P > $BBQUE_CGMOUNT/cgroup.procs
	done
}


# Setup CGroups if required
setup() {

	# Check for required ROOT permissions
	check_root

	# Lookup for host specific PIL Layout and
	# setup the corresponing CGgroup configuration
	PILSETUP="$BBQUE_PILSETUPS/`hostname`.bpl"
	CGSETUP="$BBQUE_CGCONFS/`hostname`.cgroup"
	if [ ! -f $PILSETUP ]; then
		# if not provided: revert to default PIL Layout
		PILSETUP="$BBQUE_PILSETUPS/$BBQUE_PILLAYOUT.bpl"
		CGSETUP="$BBQUE_CGCONFS/$BBQUE_PILLAYOUT.cgroup"
	fi

	# Check if the CGroup hierarcy is already mounted
	if [ ! -f $BBQUE_CGMOUNT/tasks ]; then
		echo "Mounting CGroups on [$BBQUE_CGMOUNT]..."
		mkdir -p $BBQUE_CGMOUNT >/dev/null 2>&1
		check_controllers
	fi

	# Check for CFS quota support
	if [ ! -f $BBQUE_CGMOUNT/cpu.cfs_quota_us ]; then
		echo "Disabling CFS Quota suppport (Error: not available)"
		CGROUP_FEATURES_CPUQ="N"
	fi

	# Getting the total platform available CPUs and MEMs
	PLAT_CPUS=`cat $BBQUE_CGMOUNT/cpuset.cpus`
	PLAT_MEMS=`cat $BBQUE_CGMOUNT/cpuset.mems`

	if [ ! -f $CGSETUP -o $PILSETUP -nt $CGSETUP ]; then
		echo "Compiling PIL Layout [$PILSETUP]..."
		$BBQUE_PILPARSER \
				-v BBQUE_PLAT_CPUS="$PLAT_CPUS" \
				-v BBQUE_PLAT_MEMS="$PLAT_MEMS" \
				-v BBQUE_FEAT_CPUQ="$CGROUP_FEATURES_CPUQ" \
				$PILSETUP > $CGSETUP
	fi

	echo "Loading CGroups configuration [$CGSETUP]..."
	$BBQUE_CGPARSER -l $CGSETUP || exit 1

	echo "Setup CGroups shiled..."
	ShieldBuild

	echo "Setup Release Agent [$BBQUE_CGAGENT]..."
	echo "$BBQUE_CGAGENT" > $BBQUE_CGMOUNT/release_agent
	echo "1" > $BBQUE_CGMOUNT/bbque/notify_on_release
}

start() {
	# Start the daemon only if there is not another instance running
	if [ -f $BBQUE_PIDFILE ]; then
		PID=`cat $BBQUE_PIDFILE`
		if [ -d /proc/$PID ]; then
			echo "Barbeque RTRM daemon already running [PID: $PID]"
			exit 1
		fi
	fi

	# Setup CGroups
	echo "System setup..."
	setup

	# Ensure the run-time BBQ folder exists and it is world writable
	mkdir -p $BBQUE_BRTF 2>/dev/null
	chmod a+w $BBQUE_BRTF

	# Setup logfile path
	TMPCONF=`mktemp /tmp/bbque.conf.XXXXXX`
	cat $BBQUE_CONF > $TMPCONF
	LOGESC=$(echo $BBQUE_LOGFILE | sed 's/\//\\\//g')
	SEDPRG="s/appender.raFile.fileName = .*/appender.raFile.fileName = $LOGESC/"
	sed "$SEDPRG" $TMPCONF > $BBQUE_CONF
	rm -f $TMPCONF

	# Run the daemon
	echo "Starting BBQ Daemon..."
	"$BBQUE_BIN" -c $BBQUE_CONF -d && \
			echo "Using LOG file [$BBQUE_LOGFILE]"
}

stop() {
	# Stop the daemon only if there is an instance running
	if [ -f $BBQUE_PIDFILE ]; then
		echo "Stopping BBQ Daemon..."
		PID=`cat $BBQUE_PIDFILE`
		kill -TERM $PID >/dev/null 2>&1
	fi

	# Cleaning-up CGroup reservations
	if [ -d $BBQUE_CGMOUNT/bbque ]; then
		echo "Releasing CGroups shiled..."
		release
		sleep 1
		echo "Releasing BBQ CGroups..."
		find  $BBQUE_CGMOUNT/bbque -type d -delete
	fi

	# Clean-up lock and PID files
	rm -f $BBQUE_PIDFILE $BBQUE_LOCKFILE >/dev/null 2>&1

	exit 0
}

restart() {
	stop
	sleep 1
	start
}

case "$1" in
	start)
		start
		;;
	stop)
		stop
		;;
	restart)
		restart
		;;
	status)
		# not implemented
		;;
	setup)
		setup
		;;
	release)
		release
		;;
	*)
		echo "Usage: $0 {start|stop|restart}, or {setup|release} for cgroups management only"
		exit 1
		;;
esac

# vim: set tabstop=4:
