#!/bin/sh

### BEGIN INIT INFO
# Provides:          bbqued
# Required-Start:
# Required-Stop:
# Should-Start:
# Should-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: BarbequeRTRM daemon for Run-Time Resource Management
# Description:       The Barbeque daemon wait for applications needing to
#                    access accellerator resources and assigne them according
#                    to resources availability and application requirements.
### END INIT INFO

# Barbeque daemon handler script. Distro-independent script to start/stop
# daemon. Should be runnable in any distro but won't give any feedback.
# Avoid bashism since this script runs using /bin/sh, not /bin/bash!

DAEMON_CONF="${CMAKE_INSTALL_PREFIX}/${BBQUE_PATH_DEFAULTS}/bbqued"
if [ ! -f $DAEMON_CONF ]; then
		echo "Daemon configuration [$DAEMON_CONF] not found"
		exit 1
fi

# Source the daemon configuration settings
. ${CMAKE_INSTALL_PREFIX}/etc/default/bbqued

# Setup actual value (env overriding allowed)
BBQUE_BIN="${BBQUE_BIN:-$BIN}"
BBQUE_CONF="${BBQUE_CONF:-$CONF}"
BBQUE_PIDFILE="${BBQUE_PIDFILE:-$PIDFILE}"
BBQUE_LOCKFILE="${BBQUE_LOCKFILE:-$LOCKFILE}"

BBQUE_MOUNT="${BBQUE_MOUNT:-$MOUNT}"
BBQUE_CGSETUPS="${BBQUE_CGSETUPS:-$CGSETUPS}"
BBQUE_CGLAYOUT="${BBQUE_CGLAYOUT:-$CGLAYOUT}"
BBQUE_CGPARSER="${BBQUE_CGPARSER:-$CGPARSER}"

# Check root permission
check_root() {
		# Make sure only root can run our script
		if [ "x`id -u`" != "x0" ]; then
				echo "This script must be run as root\n\n"
				exit 1
		fi
}

# Setup CGroups if required
setup() {

	# Check for required ROOT permissions
	check_root

	# Lookup for host specific configuration
	CGSETUP="$BBQUE_CGSETUPS/`hostname`.cgroup"
	if [ ! -f $CGSETUP ]; then
		# if not provided: revert to default configuration
		CGSETUP="$BBQUE_CGSETUPS/$BBQUE_CGLAYOUT.cgroup"
	fi

	# Check if the CGroup hierarcy is already mounted
	if [ ! -f $BBQUE_MOUNT/tasks ]; then
		echo "Mounting CGroups on [$BBQUE_MOUNT]..."
		mkdir -p $BBQUE_MOUNT >/dev/null 2>&1
		mount -t cgroup -o cpuset,memory bbque_cgroups $BBQUE_MOUNT
		if [ $? -ne 0 ]; then
				echo "Mounting hierarchies [cpuset,memory] FAILED"
				echo "Check they are not yet mounted with different controllers"
				cat /proc/cgroups
				exit 1
		fi
	fi

	echo "Loading CGroups configuration [$CGSETUP]..."
	$BBQUE_CGPARSER -l $CGSETUP || exit 1
}

start() {
	# Start the daemon only if there is not another instance running
	if [ -f $BBQUE_PIDFILE ]; then
		PID=`cat $BBQUE_PIDFILE`
		if [ -d /proc/$PID ]; then
			echo "Barbeque RTRM daemon already running [PID: $PID]"
			exit 1
		fi
	fi

	# Setup CGroups
	setup

	# Run the daemon
	"$BBQUE_BIN" -c $BBQUE_CONF -d
}

stop() {
	# Stop the daemon only if there is an instance running
	if [ -f $BBQUE_PIDFILE ]; then
		# Terminating BBQ daemon
		PID=`cat $BBQUE_PIDFILE`
		kill -TERM $PID >/dev/null 2>&1
	fi

	# Cleaning-up CGroup reservations
	if [ -d $BBQUE_CGMOUNT/bbque ]; then
		find  $BBQUE_CGMOUNT/bbque -type d -delete
	fi

	# Clean-up lock and PID files
	rm -f $BBQUE_PIDFILE $BBQUE_LOCKFILE >/dev/null 2>&1

	exit 0
}

restart() {
	stop
	sleep 1
	start
}

case "$1" in
	start)
		start
		;;
	stop)
		stop
		;;
	restart)
		restart
		;;
	status)
		# not implemented
		;;
	*)
		echo "Usage: $0 {start|stop|restart}"
		exit 1
		;;
esac

# vim: set tabstop=4:
