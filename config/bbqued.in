#!/bin/bash

# Bash script to start/stop the BarbequeRTRM daemon.

declare START_TIME=$(date +%s.%3N)

bbqued_info() {
	echo -ne '\E[33;0m'
	printf "[%5s] $1\n" $(echo $(date +%s.%3N)"-"$START_TIME | bc)
	echo -ne '\E[33;0m'
}
bbqued_notice() {
	echo -ne '\E[33;35m'
	printf "[%5s] $1\n" $(echo $(date +%s.%3N)"-"$START_TIME | bc)
	echo -ne '\E[33;0m'
}
bbqued_error() {
	echo -ne '\E[33;31m'
	printf "[%5s] $1\n" $(echo $(date +%s.%3N)"-"$START_TIME | bc)
	echo -ne '\E[33;0m'
	exit 1
}


# Source the daemon configuration settings
DAEMON_CONF="@CONFIG_BOSP_RUNTIME_PATH@/@BBQUE_PATH_DEFAULTS@/bbqued"
[ ! -f $DAEMON_CONF ] && bbqued_error "Daemon configuration [$DAEMON_CONF] not found"
. @CONFIG_BOSP_RUNTIME_PATH@/etc/default/bbqued

# Daemon Configuration
BBQUE_BIN="${BBQUE_BIN:-$BIN}"
BBQUE_CONF="${BBQUE_CONF:-$CONF}"
BBQUE_BRTF="${BBQUE_BRTF:-$BRTF}"
BBQUE_PIDFILE="${BBQUE_PIDFILE:-$PIDFILE}"
BBQUE_LOGFILE="${BBQUE_LOGFILE:-$LOGFILE}"
BBQUE_LOCKFILE="${BBQUE_LOCKFILE:-$LOCKFILE}"
# PIL Layouts and Tools
BBQUE_PILSETUPS="${BBQUE_PILSETUPS:-$PILSETUPS}"
BBQUE_PILLAYOUT="${BBQUE_PILLAYOUT:-$PILLAYOUT}"
BBQUE_PILPARSER="${BBQUE_PILPARSER:-$PILPARSER}"
# CGroups Configurations and Tools
BBQUE_CGMOUNT="${BBQUE_CGMOUNT:-$CGMOUNT}"
BBQUE_CGCONFS="${BBQUE_CGCONFS:-$CGCONFS}"
BBQUE_CGPARSER="${BBQUE_CGPARSER:-$CGPARSER}"
BBQUE_CGAGENT="${BBQUE_CGAGENT:-$CGAGENT}"
# PIL generator (in case not specified)
PIL_GENERATE=$SYSROOT"/sbin/bbque-pil-generator"

BBQUE_EXTRA_ARGS=""

# Check mouting status of required controllers
check_controllers() {

	BBQUE_CGMOUNT_RESOLVED=$(readlink -f $BBQUE_CGMOUNT)

	# Umount pre-existing unified hierarchies
	EXISTING_M_POINT=$(mount | grep $BBQUE_CGMOUNT_RESOLVED)
	if [ "$EXISTING_M_POINT" != "" ]; then
		bbqued_info "Umount pre-existing unified hierarchy"
		sudo umount $BBQUE_CGMOUNT_RESOLVED
	fi

	# The [cpuset,memory,cpu,cpuacct] controller must be mounted on the same hierarchy
	DIFF=$(cat /proc/cgroups | grep "cpu\|memory\|net_cls" | cut -f2 | sort -u | wc -l)

	# Hierarchies unmounting
	if [[ $DIFF != 1 ]]; then
		bbqued_info '[cpuset,memory,cpu,cpuacct,net_cls] controllers on different hierachies. Unmounting'

		grep cgroup /proc/mounts | cut -d' ' -f2 | \
		while read C; do
			[ -d $C ] || continue
			case "$C" in
			*cpuset$*|*memory$*|*cpu$*|*cpuacct$*|*net_cls$*)
				bbqued_info "Unmounting [$C] controller..."
				sudo umount $C
			esac;
		done
	fi

	# Mount BBQ required hierarchies
	mount -t cgroup -o cpu,cpuset,cpuacct,memory,net_cls bbque_cgroups \
			$BBQUE_CGMOUNT >/dev/null 2>&1
	if [ $? -ne 0 ]; then
		bbqued_error 'Mounting hierarchies [cpuset,memory,cpu,cpuacct,net_cls] FAILED'
	fi

}

# Check the preemption level of the kernel
check_rtlevel() {

	if [ -f /proc/config.gz ]
	then
		R_CONFIG_FILE="zcat /proc/config.gz"
	elif [ -f /boot/config-`uname -r` ]
	then
		R_CONFIG_FILE="cat /boot/config-`uname -r`"
	fi

	if [ ! -z "$R_CONFIG_FILE" ]
	then
		CONFIG_RT_LEVEL[0]=`eval "$R_CONFIG_FILE" | grep "PREEMPT_NONE"| grep "y"`
		CONFIG_RT_LEVEL[1]=`eval "$R_CONFIG_FILE" | grep "PREEMPT_VOLUNTARY"| grep "y"`
		CONFIG_RT_LEVEL[2]=`eval "$R_CONFIG_FILE" | grep -E "CONFIG_PREEMPT=|PREEMPT__LL" | grep "y"`
		CONFIG_RT_LEVEL[3]=`eval "$R_CONFIG_FILE" | grep "PREEMPT_RTB" | grep "y"`
		CONFIG_RT_LEVEL[4]=`eval "$R_CONFIG_FILE" | grep "PREEMPT_RT_FULL" | grep "y"`
	fi

	for i in `seq 0 4`; do
		[ -n "${CONFIG_RT_LEVEL[$i]}" ] && CONFIG_RT_LEVEL=$i
	done


	if [ -n "$CONFIG_RT_LEVEL" ]
	then
		bbqued_notice "Real-Time level set to $CONFIG_RT_LEVEL"
		BBQUE_EXTRA_ARGS="$BBQUE_EXTRA_ARGS --rtlevel $CONFIG_RT_LEVEL"
	fi

}

# Setup CGroups if required
setup() {

	# Check for required ROOT permissions
	[[ $(whoami) == "root" ]] || bbqued_error "This script must be run as root"
	eval `env | grep SUDO_USER`
	bbqued_notice "Sudo user: $SUDO_USER"

	# Check for runt-time R/W directories
	bbqued_info "Checking for runt-time R/W directories"
	if [ ! -d "$BRTRW" ]; then
		mkdir -p $BRTRW/bbque
		mkdir -p $BRTRW/lock
		mkdir -p $BRTRW/run
		chown $SUDO_USER:$SUDO_USER $BRTRW -R
	fi

	# Set the pil file name (hardware ID if selected, hostame otherwise)
	bbqued_info "Checking platform description file..."
	bbqued_notice "Platform description: $PILNAME"
	bbqued_notice "Host name: `hostname`"

	mkdir -p $BBQUE_PILSETUPS

	if [ ! -f $BBQUE_PILSETUPS/$PILNAME ]; then
		# Generating the bpl file on the fly, exploiting menuconfig info
		bbqued_info "Generating PIL layout"
		HIERARCHY_DEPTH=""

		[ -z "@CONFIG_BBQUE_MEMLOC_L3@" ] || HIERARCHY_DEPTH="L3"
		[ -z "@CONFIG_BBQUE_MEMLOC_L2@" ] || HIERARCHY_DEPTH="L2"

		# Make the generator executable
		sudo chmod a+x $PIL_GENERATE
		# Launch the generator
		$PIL_GENERATE $HIERARCHY_DEPTH
		# If the generator experiences errors, the bpl file is not created.
		# The error log is shown by the generator itself, so we can exit
		# without warnings
		[ ! -f $BBQUE_PILSETUPS/$PILNAME ] && exit
	fi

	# Lookup for host specific PIL Layout and
	# setup the corresponing CGgroup configuration
	PILSETUP=$BBQUE_PILSETUPS/$PILNAME
	CGSETUP=$BBQUE_CGCONFS/`hostname`".cgroup"

	# Check if the CGroup hierarcy is already mounted
	bbqued_notice "GCroup root: $BBQUE_CGMOUNT"
	mkdir -p $BBQUE_CGMOUNT >/dev/null 2>&1
	check_controllers

	# Check for CFS quota support
	if [ ! -f $BBQUE_CGMOUNT/cpu.cfs_quota_us ]; then
		bbqued_info "Disabling CFS Quota support (Error: not available)"
		CGROUP_FEATURES_CPUQ="N"
	fi

	# Check for CFS quota support
	if [ ! -f $BBQUE_CGMOUNT/memory.limit_in_bytes ]; then
		bbqued_info "Disabling Memory controller (Error: not available)"
		CGROUP_FEATURES_MEMC="N"
	fi

	# Getting the total platform available CPUs and MEMs
	PLAT_CPUS=`cat $BBQUE_CGMOUNT/cpuset.cpus`
	PLAT_MEMS=`cat $BBQUE_CGMOUNT/cpuset.mems`

	if [ ! -f $CGSETUP -o $PILSETUP -nt $CGSETUP ]; then

		[ ! -z "@CONFIG_BBQUE_PIL_LEGACY@" ] && \
			bbqued_info "Compiling PIL Layout [$PILSETUP]..."

		SUDO_USER_GROUP=`id -Gn $SUDO_USER | cut -d' ' -f1`

		$BBQUE_PILPARSER \
				-v BBQUE_UID="$SUDO_USER" \
				-v BBQUE_GID="$SUDO_USER_GROUP" \
				-v BBQUE_PLAT_CPUS="$PLAT_CPUS" \
				-v BBQUE_PLAT_MEMS="$PLAT_MEMS" \
				-v BBQUE_FEAT_CPUQ="$CGROUP_FEATURES_CPUQ" \
				-v BBQUE_FEAT_MEMC="$CGROUP_FEATURES_MEMC" \
				$PILSETUP > $CGSETUP

		if [ $? -ne 0 ]; then
			echo 'Platform Layout Parser FAILED'
			echo 'BarbequeRTRM could not be started'
			exit 3
		fi
	fi

	bbqued_notice "CGroups configuration: $CGSETUP"
	LD_PRELOAD=$SYSROOT/lib/libcgroup.so $BBQUE_CGPARSER -l $CGSETUP || exit 1

	# Setup CGroups shield
	bbqued_info "Moving all (user-space) tasks into HOST node"
	for D in `cat $BBQUE_CGMOUNT/cgroup.procs`; do
			# jumping kernel thread which should not be moved
			RES=$(readlink -v /proc/$D/exe 2>/dev/null)
			if [ "$RES" != "" ]; then
				echo "$D" > $BBQUE_CGMOUNT/user.slice/host/cgroup.procs 2> /dev/null
			fi
	done

	bbqued_notice "Setup Release Agent: $BBQUE_CGAGENT"
	echo "$BBQUE_CGAGENT" > $BBQUE_CGMOUNT/release_agent
	echo "1" > $BBQUE_CGMOUNT/user.slice/notify_on_release
}

start() {
	# Start the daemon only if there is not another instance running
	if [ -f $BBQUE_PIDFILE ]; then
		PID=`cat $BBQUE_PIDFILE`
		[ -d /proc/$PID ] && bbqued_error "Barbeque RTRM daemon already running [PID: $PID]"
	fi

	# Setup CGroups
	setup

	# Check the realtime level if RT enabled
	[ -z "$CONFIG_BBQUE_RT" ] && check_rtlevel

	# Ensure the run-time BBQ folder exists and it is world writable
	mkdir -p $BBQUE_BRTF 2>/dev/null
	chmod a+w $BBQUE_BRTF

	# Setup logfile path
	TMPCONF=`mktemp /tmp/bbque.conf.XXXXXX`
	cat $BBQUE_CONF > $TMPCONF
	LOGESC=$(echo $BBQUE_LOGFILE | sed 's/\//\\\//g')
	SEDPRG="s/appender.raFile.fileName = .*/appender.raFile.fileName = $LOGESC/"
	sed "$SEDPRG" $TMPCONF > $BBQUE_CONF
	rm -f $TMPCONF

	# Run the daemon
	bbqued_notice "LOG file: $BBQUE_LOGFILE"
	bbqued_info "Starting BBQ Daemon..."
	"$BBQUE_BIN" -c $BBQUE_CONF -d $BBQUE_EXTRA_ARGS
}

stop() {
	# Stop the daemon only if there is an instance running
	if [ -f $BBQUE_PIDFILE ]; then
		PID=`cat $BBQUE_PIDFILE`
		sudo kill -SIGINT $PID #>/dev/null 2>&1
	fi

	# Cleaning-up CGroup reservations
	if [ -d $BBQUE_CGMOUNT/user.slice/host ]; then
		bbqued_info "Moving all (user-space) tasks back to ROOT node"
		for P in `cat $BBQUE_CGMOUNT/user.slice/host/cgroup.procs`; do
			echo $P > $BBQUE_CGMOUNT/cgroup.procs 2> /dev/null
		done
		sleep 1
		bbqued_info "Removing applications nodes"
		find  $BBQUE_CGMOUNT/user.slice/* -type d -delete
	fi

	# Clean-up lock and PID files
	if [ -f $BBQUE_PIDFILE ] || [ -f $BBQUE_LOCKFILE ]; then
		bbqued_info "Removing runtime data"
		rm -f $BBQUE_PIDFILE $BBQUE_LOCKFILE >/dev/null 2>&1
	fi

	sudo kill -9 $(pidof barbeque) >/dev/null 2>&1

	exit 0
}

case "$1" in
	start)
		start
		;;
	stop)
		stop
		;;
	setup)
		setup
		;;
	release)
		release
		;;
	*)
		bbqued_error "Usage: $0 {start|stop}, or {setup} for cgroups management only"
		;;
esac

# vim: set tabstop=4:

