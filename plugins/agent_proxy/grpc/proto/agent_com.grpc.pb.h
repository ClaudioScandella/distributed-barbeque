// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: agent_com.proto
#ifndef GRPC_agent_5fcom_2eproto__INCLUDED
#define GRPC_agent_5fcom_2eproto__INCLUDED

#include "agent_com.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace bbque {

class RemoteAgent final {
 public:
  static constexpr char const* service_full_name() {
    return "bbque.RemoteAgent";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Discover(::grpc::ClientContext* context, const ::bbque::DiscoverRequest& request, ::bbque::DiscoverReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bbque::DiscoverReply>> AsyncDiscover(::grpc::ClientContext* context, const ::bbque::DiscoverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bbque::DiscoverReply>>(AsyncDiscoverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bbque::DiscoverReply>> PrepareAsyncDiscover(::grpc::ClientContext* context, const ::bbque::DiscoverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bbque::DiscoverReply>>(PrepareAsyncDiscoverRaw(context, request, cq));
    }
    virtual ::grpc::Status Ping(::grpc::ClientContext* context, const ::bbque::GenericRequest& request, ::bbque::GenericReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bbque::GenericReply>> AsyncPing(::grpc::ClientContext* context, const ::bbque::GenericRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bbque::GenericReply>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bbque::GenericReply>> PrepareAsyncPing(::grpc::ClientContext* context, const ::bbque::GenericRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bbque::GenericReply>>(PrepareAsyncPingRaw(context, request, cq));
    }
    virtual ::grpc::Status GetResourceStatus(::grpc::ClientContext* context, const ::bbque::ResourceStatusRequest& request, ::bbque::ResourceStatusReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bbque::ResourceStatusReply>> AsyncGetResourceStatus(::grpc::ClientContext* context, const ::bbque::ResourceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bbque::ResourceStatusReply>>(AsyncGetResourceStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bbque::ResourceStatusReply>> PrepareAsyncGetResourceStatus(::grpc::ClientContext* context, const ::bbque::ResourceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bbque::ResourceStatusReply>>(PrepareAsyncGetResourceStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status GetWorkloadStatus(::grpc::ClientContext* context, const ::bbque::GenericRequest& request, ::bbque::WorkloadStatusReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bbque::WorkloadStatusReply>> AsyncGetWorkloadStatus(::grpc::ClientContext* context, const ::bbque::GenericRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bbque::WorkloadStatusReply>>(AsyncGetWorkloadStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bbque::WorkloadStatusReply>> PrepareAsyncGetWorkloadStatus(::grpc::ClientContext* context, const ::bbque::GenericRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bbque::WorkloadStatusReply>>(PrepareAsyncGetWorkloadStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status GetChannelStatus(::grpc::ClientContext* context, const ::bbque::GenericRequest& request, ::bbque::ChannelStatusReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bbque::ChannelStatusReply>> AsyncGetChannelStatus(::grpc::ClientContext* context, const ::bbque::GenericRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bbque::ChannelStatusReply>>(AsyncGetChannelStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bbque::ChannelStatusReply>> PrepareAsyncGetChannelStatus(::grpc::ClientContext* context, const ::bbque::GenericRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bbque::ChannelStatusReply>>(PrepareAsyncGetChannelStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status SetNodeManagementAction(::grpc::ClientContext* context, const ::bbque::NodeManagementRequest& request, ::bbque::GenericReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bbque::GenericReply>> AsyncSetNodeManagementAction(::grpc::ClientContext* context, const ::bbque::NodeManagementRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bbque::GenericReply>>(AsyncSetNodeManagementActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bbque::GenericReply>> PrepareAsyncSetNodeManagementAction(::grpc::ClientContext* context, const ::bbque::NodeManagementRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bbque::GenericReply>>(PrepareAsyncSetNodeManagementActionRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Discover(::grpc::ClientContext* context, const ::bbque::DiscoverRequest* request, ::bbque::DiscoverReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Ping(::grpc::ClientContext* context, const ::bbque::GenericRequest* request, ::bbque::GenericReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetResourceStatus(::grpc::ClientContext* context, const ::bbque::ResourceStatusRequest* request, ::bbque::ResourceStatusReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetWorkloadStatus(::grpc::ClientContext* context, const ::bbque::GenericRequest* request, ::bbque::WorkloadStatusReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetChannelStatus(::grpc::ClientContext* context, const ::bbque::GenericRequest* request, ::bbque::ChannelStatusReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetNodeManagementAction(::grpc::ClientContext* context, const ::bbque::NodeManagementRequest* request, ::bbque::GenericReply* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bbque::DiscoverReply>* AsyncDiscoverRaw(::grpc::ClientContext* context, const ::bbque::DiscoverRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bbque::DiscoverReply>* PrepareAsyncDiscoverRaw(::grpc::ClientContext* context, const ::bbque::DiscoverRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bbque::GenericReply>* AsyncPingRaw(::grpc::ClientContext* context, const ::bbque::GenericRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bbque::GenericReply>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::bbque::GenericRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bbque::ResourceStatusReply>* AsyncGetResourceStatusRaw(::grpc::ClientContext* context, const ::bbque::ResourceStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bbque::ResourceStatusReply>* PrepareAsyncGetResourceStatusRaw(::grpc::ClientContext* context, const ::bbque::ResourceStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bbque::WorkloadStatusReply>* AsyncGetWorkloadStatusRaw(::grpc::ClientContext* context, const ::bbque::GenericRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bbque::WorkloadStatusReply>* PrepareAsyncGetWorkloadStatusRaw(::grpc::ClientContext* context, const ::bbque::GenericRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bbque::ChannelStatusReply>* AsyncGetChannelStatusRaw(::grpc::ClientContext* context, const ::bbque::GenericRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bbque::ChannelStatusReply>* PrepareAsyncGetChannelStatusRaw(::grpc::ClientContext* context, const ::bbque::GenericRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bbque::GenericReply>* AsyncSetNodeManagementActionRaw(::grpc::ClientContext* context, const ::bbque::NodeManagementRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bbque::GenericReply>* PrepareAsyncSetNodeManagementActionRaw(::grpc::ClientContext* context, const ::bbque::NodeManagementRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Discover(::grpc::ClientContext* context, const ::bbque::DiscoverRequest& request, ::bbque::DiscoverReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bbque::DiscoverReply>> AsyncDiscover(::grpc::ClientContext* context, const ::bbque::DiscoverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bbque::DiscoverReply>>(AsyncDiscoverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bbque::DiscoverReply>> PrepareAsyncDiscover(::grpc::ClientContext* context, const ::bbque::DiscoverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bbque::DiscoverReply>>(PrepareAsyncDiscoverRaw(context, request, cq));
    }
    ::grpc::Status Ping(::grpc::ClientContext* context, const ::bbque::GenericRequest& request, ::bbque::GenericReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bbque::GenericReply>> AsyncPing(::grpc::ClientContext* context, const ::bbque::GenericRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bbque::GenericReply>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bbque::GenericReply>> PrepareAsyncPing(::grpc::ClientContext* context, const ::bbque::GenericRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bbque::GenericReply>>(PrepareAsyncPingRaw(context, request, cq));
    }
    ::grpc::Status GetResourceStatus(::grpc::ClientContext* context, const ::bbque::ResourceStatusRequest& request, ::bbque::ResourceStatusReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bbque::ResourceStatusReply>> AsyncGetResourceStatus(::grpc::ClientContext* context, const ::bbque::ResourceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bbque::ResourceStatusReply>>(AsyncGetResourceStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bbque::ResourceStatusReply>> PrepareAsyncGetResourceStatus(::grpc::ClientContext* context, const ::bbque::ResourceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bbque::ResourceStatusReply>>(PrepareAsyncGetResourceStatusRaw(context, request, cq));
    }
    ::grpc::Status GetWorkloadStatus(::grpc::ClientContext* context, const ::bbque::GenericRequest& request, ::bbque::WorkloadStatusReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bbque::WorkloadStatusReply>> AsyncGetWorkloadStatus(::grpc::ClientContext* context, const ::bbque::GenericRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bbque::WorkloadStatusReply>>(AsyncGetWorkloadStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bbque::WorkloadStatusReply>> PrepareAsyncGetWorkloadStatus(::grpc::ClientContext* context, const ::bbque::GenericRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bbque::WorkloadStatusReply>>(PrepareAsyncGetWorkloadStatusRaw(context, request, cq));
    }
    ::grpc::Status GetChannelStatus(::grpc::ClientContext* context, const ::bbque::GenericRequest& request, ::bbque::ChannelStatusReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bbque::ChannelStatusReply>> AsyncGetChannelStatus(::grpc::ClientContext* context, const ::bbque::GenericRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bbque::ChannelStatusReply>>(AsyncGetChannelStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bbque::ChannelStatusReply>> PrepareAsyncGetChannelStatus(::grpc::ClientContext* context, const ::bbque::GenericRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bbque::ChannelStatusReply>>(PrepareAsyncGetChannelStatusRaw(context, request, cq));
    }
    ::grpc::Status SetNodeManagementAction(::grpc::ClientContext* context, const ::bbque::NodeManagementRequest& request, ::bbque::GenericReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bbque::GenericReply>> AsyncSetNodeManagementAction(::grpc::ClientContext* context, const ::bbque::NodeManagementRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bbque::GenericReply>>(AsyncSetNodeManagementActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bbque::GenericReply>> PrepareAsyncSetNodeManagementAction(::grpc::ClientContext* context, const ::bbque::NodeManagementRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bbque::GenericReply>>(PrepareAsyncSetNodeManagementActionRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Discover(::grpc::ClientContext* context, const ::bbque::DiscoverRequest* request, ::bbque::DiscoverReply* response, std::function<void(::grpc::Status)>) override;
      void Ping(::grpc::ClientContext* context, const ::bbque::GenericRequest* request, ::bbque::GenericReply* response, std::function<void(::grpc::Status)>) override;
      void GetResourceStatus(::grpc::ClientContext* context, const ::bbque::ResourceStatusRequest* request, ::bbque::ResourceStatusReply* response, std::function<void(::grpc::Status)>) override;
      void GetWorkloadStatus(::grpc::ClientContext* context, const ::bbque::GenericRequest* request, ::bbque::WorkloadStatusReply* response, std::function<void(::grpc::Status)>) override;
      void GetChannelStatus(::grpc::ClientContext* context, const ::bbque::GenericRequest* request, ::bbque::ChannelStatusReply* response, std::function<void(::grpc::Status)>) override;
      void SetNodeManagementAction(::grpc::ClientContext* context, const ::bbque::NodeManagementRequest* request, ::bbque::GenericReply* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::bbque::DiscoverReply>* AsyncDiscoverRaw(::grpc::ClientContext* context, const ::bbque::DiscoverRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bbque::DiscoverReply>* PrepareAsyncDiscoverRaw(::grpc::ClientContext* context, const ::bbque::DiscoverRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bbque::GenericReply>* AsyncPingRaw(::grpc::ClientContext* context, const ::bbque::GenericRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bbque::GenericReply>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::bbque::GenericRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bbque::ResourceStatusReply>* AsyncGetResourceStatusRaw(::grpc::ClientContext* context, const ::bbque::ResourceStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bbque::ResourceStatusReply>* PrepareAsyncGetResourceStatusRaw(::grpc::ClientContext* context, const ::bbque::ResourceStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bbque::WorkloadStatusReply>* AsyncGetWorkloadStatusRaw(::grpc::ClientContext* context, const ::bbque::GenericRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bbque::WorkloadStatusReply>* PrepareAsyncGetWorkloadStatusRaw(::grpc::ClientContext* context, const ::bbque::GenericRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bbque::ChannelStatusReply>* AsyncGetChannelStatusRaw(::grpc::ClientContext* context, const ::bbque::GenericRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bbque::ChannelStatusReply>* PrepareAsyncGetChannelStatusRaw(::grpc::ClientContext* context, const ::bbque::GenericRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bbque::GenericReply>* AsyncSetNodeManagementActionRaw(::grpc::ClientContext* context, const ::bbque::NodeManagementRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bbque::GenericReply>* PrepareAsyncSetNodeManagementActionRaw(::grpc::ClientContext* context, const ::bbque::NodeManagementRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Discover_;
    const ::grpc::internal::RpcMethod rpcmethod_Ping_;
    const ::grpc::internal::RpcMethod rpcmethod_GetResourceStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GetWorkloadStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GetChannelStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_SetNodeManagementAction_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Discover(::grpc::ServerContext* context, const ::bbque::DiscoverRequest* request, ::bbque::DiscoverReply* response);
    virtual ::grpc::Status Ping(::grpc::ServerContext* context, const ::bbque::GenericRequest* request, ::bbque::GenericReply* response);
    virtual ::grpc::Status GetResourceStatus(::grpc::ServerContext* context, const ::bbque::ResourceStatusRequest* request, ::bbque::ResourceStatusReply* response);
    virtual ::grpc::Status GetWorkloadStatus(::grpc::ServerContext* context, const ::bbque::GenericRequest* request, ::bbque::WorkloadStatusReply* response);
    virtual ::grpc::Status GetChannelStatus(::grpc::ServerContext* context, const ::bbque::GenericRequest* request, ::bbque::ChannelStatusReply* response);
    virtual ::grpc::Status SetNodeManagementAction(::grpc::ServerContext* context, const ::bbque::NodeManagementRequest* request, ::bbque::GenericReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Discover : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Discover() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Discover() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Discover(::grpc::ServerContext* context, const ::bbque::DiscoverRequest* request, ::bbque::DiscoverReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDiscover(::grpc::ServerContext* context, ::bbque::DiscoverRequest* request, ::grpc::ServerAsyncResponseWriter< ::bbque::DiscoverReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Ping() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* context, const ::bbque::GenericRequest* request, ::bbque::GenericReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::bbque::GenericRequest* request, ::grpc::ServerAsyncResponseWriter< ::bbque::GenericReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetResourceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetResourceStatus() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetResourceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourceStatus(::grpc::ServerContext* context, const ::bbque::ResourceStatusRequest* request, ::bbque::ResourceStatusReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResourceStatus(::grpc::ServerContext* context, ::bbque::ResourceStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::bbque::ResourceStatusReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWorkloadStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetWorkloadStatus() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetWorkloadStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkloadStatus(::grpc::ServerContext* context, const ::bbque::GenericRequest* request, ::bbque::WorkloadStatusReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWorkloadStatus(::grpc::ServerContext* context, ::bbque::GenericRequest* request, ::grpc::ServerAsyncResponseWriter< ::bbque::WorkloadStatusReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetChannelStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetChannelStatus() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetChannelStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChannelStatus(::grpc::ServerContext* context, const ::bbque::GenericRequest* request, ::bbque::ChannelStatusReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChannelStatus(::grpc::ServerContext* context, ::bbque::GenericRequest* request, ::grpc::ServerAsyncResponseWriter< ::bbque::ChannelStatusReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetNodeManagementAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetNodeManagementAction() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SetNodeManagementAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNodeManagementAction(::grpc::ServerContext* context, const ::bbque::NodeManagementRequest* request, ::bbque::GenericReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetNodeManagementAction(::grpc::ServerContext* context, ::bbque::NodeManagementRequest* request, ::grpc::ServerAsyncResponseWriter< ::bbque::GenericReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Discover<WithAsyncMethod_Ping<WithAsyncMethod_GetResourceStatus<WithAsyncMethod_GetWorkloadStatus<WithAsyncMethod_GetChannelStatus<WithAsyncMethod_SetNodeManagementAction<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Discover : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Discover() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::bbque::DiscoverRequest, ::bbque::DiscoverReply>(
          [this](::grpc::ServerContext* context,
                 const ::bbque::DiscoverRequest* request,
                 ::bbque::DiscoverReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Discover(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Discover() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Discover(::grpc::ServerContext* context, const ::bbque::DiscoverRequest* request, ::bbque::DiscoverReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Discover(::grpc::ServerContext* context, const ::bbque::DiscoverRequest* request, ::bbque::DiscoverReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Ping() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::bbque::GenericRequest, ::bbque::GenericReply>(
          [this](::grpc::ServerContext* context,
                 const ::bbque::GenericRequest* request,
                 ::bbque::GenericReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Ping(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* context, const ::bbque::GenericRequest* request, ::bbque::GenericReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Ping(::grpc::ServerContext* context, const ::bbque::GenericRequest* request, ::bbque::GenericReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetResourceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetResourceStatus() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::bbque::ResourceStatusRequest, ::bbque::ResourceStatusReply>(
          [this](::grpc::ServerContext* context,
                 const ::bbque::ResourceStatusRequest* request,
                 ::bbque::ResourceStatusReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetResourceStatus(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetResourceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourceStatus(::grpc::ServerContext* context, const ::bbque::ResourceStatusRequest* request, ::bbque::ResourceStatusReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetResourceStatus(::grpc::ServerContext* context, const ::bbque::ResourceStatusRequest* request, ::bbque::ResourceStatusReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetWorkloadStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetWorkloadStatus() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::bbque::GenericRequest, ::bbque::WorkloadStatusReply>(
          [this](::grpc::ServerContext* context,
                 const ::bbque::GenericRequest* request,
                 ::bbque::WorkloadStatusReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetWorkloadStatus(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetWorkloadStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkloadStatus(::grpc::ServerContext* context, const ::bbque::GenericRequest* request, ::bbque::WorkloadStatusReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetWorkloadStatus(::grpc::ServerContext* context, const ::bbque::GenericRequest* request, ::bbque::WorkloadStatusReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetChannelStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetChannelStatus() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::bbque::GenericRequest, ::bbque::ChannelStatusReply>(
          [this](::grpc::ServerContext* context,
                 const ::bbque::GenericRequest* request,
                 ::bbque::ChannelStatusReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetChannelStatus(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetChannelStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChannelStatus(::grpc::ServerContext* context, const ::bbque::GenericRequest* request, ::bbque::ChannelStatusReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetChannelStatus(::grpc::ServerContext* context, const ::bbque::GenericRequest* request, ::bbque::ChannelStatusReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetNodeManagementAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SetNodeManagementAction() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::bbque::NodeManagementRequest, ::bbque::GenericReply>(
          [this](::grpc::ServerContext* context,
                 const ::bbque::NodeManagementRequest* request,
                 ::bbque::GenericReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetNodeManagementAction(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_SetNodeManagementAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNodeManagementAction(::grpc::ServerContext* context, const ::bbque::NodeManagementRequest* request, ::bbque::GenericReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetNodeManagementAction(::grpc::ServerContext* context, const ::bbque::NodeManagementRequest* request, ::bbque::GenericReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Discover<ExperimentalWithCallbackMethod_Ping<ExperimentalWithCallbackMethod_GetResourceStatus<ExperimentalWithCallbackMethod_GetWorkloadStatus<ExperimentalWithCallbackMethod_GetChannelStatus<ExperimentalWithCallbackMethod_SetNodeManagementAction<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Discover : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Discover() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Discover() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Discover(::grpc::ServerContext* context, const ::bbque::DiscoverRequest* request, ::bbque::DiscoverReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Ping() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* context, const ::bbque::GenericRequest* request, ::bbque::GenericReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetResourceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetResourceStatus() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetResourceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourceStatus(::grpc::ServerContext* context, const ::bbque::ResourceStatusRequest* request, ::bbque::ResourceStatusReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetWorkloadStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetWorkloadStatus() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetWorkloadStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkloadStatus(::grpc::ServerContext* context, const ::bbque::GenericRequest* request, ::bbque::WorkloadStatusReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetChannelStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetChannelStatus() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetChannelStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChannelStatus(::grpc::ServerContext* context, const ::bbque::GenericRequest* request, ::bbque::ChannelStatusReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetNodeManagementAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetNodeManagementAction() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SetNodeManagementAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNodeManagementAction(::grpc::ServerContext* context, const ::bbque::NodeManagementRequest* request, ::bbque::GenericReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Discover : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Discover() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Discover() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Discover(::grpc::ServerContext* context, const ::bbque::DiscoverRequest* request, ::bbque::DiscoverReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDiscover(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Ping() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* context, const ::bbque::GenericRequest* request, ::bbque::GenericReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetResourceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetResourceStatus() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetResourceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourceStatus(::grpc::ServerContext* context, const ::bbque::ResourceStatusRequest* request, ::bbque::ResourceStatusReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResourceStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetWorkloadStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetWorkloadStatus() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetWorkloadStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkloadStatus(::grpc::ServerContext* context, const ::bbque::GenericRequest* request, ::bbque::WorkloadStatusReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWorkloadStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetChannelStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetChannelStatus() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetChannelStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChannelStatus(::grpc::ServerContext* context, const ::bbque::GenericRequest* request, ::bbque::ChannelStatusReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChannelStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetNodeManagementAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetNodeManagementAction() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SetNodeManagementAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNodeManagementAction(::grpc::ServerContext* context, const ::bbque::NodeManagementRequest* request, ::bbque::GenericReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetNodeManagementAction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Discover : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Discover() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Discover(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Discover() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Discover(::grpc::ServerContext* context, const ::bbque::DiscoverRequest* request, ::bbque::DiscoverReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Discover(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Ping() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Ping(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* context, const ::bbque::GenericRequest* request, ::bbque::GenericReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Ping(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetResourceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetResourceStatus() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetResourceStatus(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetResourceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourceStatus(::grpc::ServerContext* context, const ::bbque::ResourceStatusRequest* request, ::bbque::ResourceStatusReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetResourceStatus(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetWorkloadStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetWorkloadStatus() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetWorkloadStatus(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetWorkloadStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkloadStatus(::grpc::ServerContext* context, const ::bbque::GenericRequest* request, ::bbque::WorkloadStatusReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetWorkloadStatus(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetChannelStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetChannelStatus() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetChannelStatus(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetChannelStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChannelStatus(::grpc::ServerContext* context, const ::bbque::GenericRequest* request, ::bbque::ChannelStatusReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetChannelStatus(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetNodeManagementAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SetNodeManagementAction() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetNodeManagementAction(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetNodeManagementAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNodeManagementAction(::grpc::ServerContext* context, const ::bbque::NodeManagementRequest* request, ::bbque::GenericReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetNodeManagementAction(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Discover : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Discover() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::bbque::DiscoverRequest, ::bbque::DiscoverReply>(std::bind(&WithStreamedUnaryMethod_Discover<BaseClass>::StreamedDiscover, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Discover() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Discover(::grpc::ServerContext* context, const ::bbque::DiscoverRequest* request, ::bbque::DiscoverReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDiscover(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bbque::DiscoverRequest,::bbque::DiscoverReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Ping() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::bbque::GenericRequest, ::bbque::GenericReply>(std::bind(&WithStreamedUnaryMethod_Ping<BaseClass>::StreamedPing, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Ping(::grpc::ServerContext* context, const ::bbque::GenericRequest* request, ::bbque::GenericReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bbque::GenericRequest,::bbque::GenericReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetResourceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetResourceStatus() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::bbque::ResourceStatusRequest, ::bbque::ResourceStatusReply>(std::bind(&WithStreamedUnaryMethod_GetResourceStatus<BaseClass>::StreamedGetResourceStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetResourceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetResourceStatus(::grpc::ServerContext* context, const ::bbque::ResourceStatusRequest* request, ::bbque::ResourceStatusReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetResourceStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bbque::ResourceStatusRequest,::bbque::ResourceStatusReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetWorkloadStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetWorkloadStatus() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::bbque::GenericRequest, ::bbque::WorkloadStatusReply>(std::bind(&WithStreamedUnaryMethod_GetWorkloadStatus<BaseClass>::StreamedGetWorkloadStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetWorkloadStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetWorkloadStatus(::grpc::ServerContext* context, const ::bbque::GenericRequest* request, ::bbque::WorkloadStatusReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetWorkloadStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bbque::GenericRequest,::bbque::WorkloadStatusReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetChannelStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetChannelStatus() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::bbque::GenericRequest, ::bbque::ChannelStatusReply>(std::bind(&WithStreamedUnaryMethod_GetChannelStatus<BaseClass>::StreamedGetChannelStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetChannelStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetChannelStatus(::grpc::ServerContext* context, const ::bbque::GenericRequest* request, ::bbque::ChannelStatusReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetChannelStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bbque::GenericRequest,::bbque::ChannelStatusReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetNodeManagementAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetNodeManagementAction() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::bbque::NodeManagementRequest, ::bbque::GenericReply>(std::bind(&WithStreamedUnaryMethod_SetNodeManagementAction<BaseClass>::StreamedSetNodeManagementAction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetNodeManagementAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetNodeManagementAction(::grpc::ServerContext* context, const ::bbque::NodeManagementRequest* request, ::bbque::GenericReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetNodeManagementAction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bbque::NodeManagementRequest,::bbque::GenericReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Discover<WithStreamedUnaryMethod_Ping<WithStreamedUnaryMethod_GetResourceStatus<WithStreamedUnaryMethod_GetWorkloadStatus<WithStreamedUnaryMethod_GetChannelStatus<WithStreamedUnaryMethod_SetNodeManagementAction<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Discover<WithStreamedUnaryMethod_Ping<WithStreamedUnaryMethod_GetResourceStatus<WithStreamedUnaryMethod_GetWorkloadStatus<WithStreamedUnaryMethod_GetChannelStatus<WithStreamedUnaryMethod_SetNodeManagementAction<Service > > > > > > StreamedService;
};

}  // namespace bbque


#endif  // GRPC_agent_5fcom_2eproto__INCLUDED
